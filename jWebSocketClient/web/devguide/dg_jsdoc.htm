<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>jWebSocket JavaScript Doc</title>
<link rel="stylesheet" type="text/css" href="../res/css/jwebsocket.css">
</head>

<body>

<h1>JavaScript Documentation Quick-Reference</h1>
<p>The &quot;JavaScript-Toolbox&quot; among others contains an Inline Documentation to 
Human Readable Documentation Converter. Like in JavaDoc the JavaScript code therefor contains 
the inline documentation within certain tags which are parsed during the 
conversion to be exported to HTML or Wiki pages or any other desired target. It's a two step conversion. In the first step the converter creates 
a <tt>.xml</tt> file which is used as common source for the output generators 
which in the second step create the final target file(s).</p>
<p>The tags have the following general format:</p>
<p><code>//:tag:language:additional[:arguments[:...]]</code></p>
<p>The Inline documentation system supports the following tags in the JavaScript 
code:</p>
<table class="stblData" border="1" style="border-collapse: collapse" bordercolor="#808080" id="table1">
	<tr class="strData">
		<th class="sthData">Long&nbsp;Tag</th>
		<th class="sthData">Short&nbsp;Tag</th>
		<th class="sthData">General&nbsp;Format</th>
		<th class="sthData">Description</th>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">file</td>
		<td class="stdData" valign="top">-</td>
		<td class="stdData" valign="top">//:file:&lt;filename&gt;</td>
		<td class="stdData" valign="top">Documents the name of the file, usually 
		immediately followed by a description tag.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">description</td>
		<td class="stdData" valign="top">d</td>
		<td class="stdData" valign="top">//:d:language|*:<i>&lt;text&gt;</i></td>
		<td class="stdData" valign="top">Adds a description to the previous tag. This relates to package, 
		class, method, function, variable, constant but currently not to 
		argument and result, because these have their own short description.<p>
		Multiple lines in the resulting human readable file are usually appended 
		with a line break. If you want to concatenate multiple lines with 
		autowrapping in the browser you can append an trailing underscore as 
		show below.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">package</td>
		<td class="stdData" valign="top">-</td>
		<td class="stdData" valign="top">//:package:language|*:name</td>
		<td class="stdData" valign="top">Documents a package (class path) in 
		which the following class is declared.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">class</td>
		<td class="stdData" valign="top">-</td>
		<td class="stdData" valign="top">//:class:language|*:name</td>
		<td class="stdData" valign="top">Documents a class. The constants and 
		fields as well as the methods together with their argument follow in the 
		class body.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">method</td>
		<td class="stdData" valign="top">m</td>
		<td class="stdData" valign="top">//:method|m:language|*:name</td>
		<td class="stdData" valign="top">Documents a method within a class. 
		Description, arguments and result follow as described below.</td>
	</tr>
	<tr>
		<td class="stdData" valign="top">function</td>
		<td class="stdData" valign="top">f</td>
		<td class="stdData" valign="top">//:function|f:language|*:name</td>
		<td class="stdData" valign="top">Documents a function w/o a relation to 
		a class. Description, arguments and result follow as described below.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">argument</td>
		<td class="stdData" valign="top">a</td>
		<td class="stdData" valign="top">//:argument|a:language|*:object:field:type:<i>&lt;text&gt;</i></td>
		<td class="stdData" valign="top">Documents an argument of a method or 
		function.<br>
		If a native type result (e.g. String, Number, Boolean etc.) is passed 
		only the <aa>field</aa> and <tt>type</tt> arguments hav to be passed (there is no 
		object with field names in this 
		case). If an object is passed the object field has to be <tt>Object</tt>, the 
		<tt>field</tt> has to contain the field name and the <tt>type</tt> field the type of the 
		field.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">result</td>
		<td class="stdData" valign="top">r</td>
		<td class="stdData" valign="top">//:result:language|*:object:field:type:<i>&lt;text&gt;</i></td>
		<td class="stdData" valign="top">Documents the result of a method or 
		function.<br>
		If a native type result (e.g. String, Number, Boolean etc.) is returned 
		only <tt>type</tt> argument has to be passed (there is no field name in this 
		case). If an object is returned the object field has to be <tt>Object</tt>, the 
		<tt>field</tt> argument has to contain the field name and <tt>type</tt> the type of the 
		field.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">variable</td>
		<td class="stdData" valign="top">var</td>
		<td class="stdData" valign="top">//:variable|var:language:name:type</td>
		<td class="stdData" valign="top">Documents a variable, either 
		stand-alone (i.e. in the window context or a variable field within a 
		class).<br>
		Variables per naming convention are written in lower case notation.</td>
	</tr>
	<tr class="strData">
		<td class="stdData" valign="top">constant</td>
		<td class="stdData" valign="top">-</td>
		<td class="stdData" valign="top">//:constant:language|*:name:type:value</td>
		<td class="stdData" valign="top">Documents a constant, either 
		stand-alone (i.e. in the window context or a constant field within a 
		class).<br>
		Constants per naming convention are written in upper case notation.</td>
	</tr>
	</table>
<p class="imageFooter">Supported Tags for the JavaScript Toolbox JSDoc function</p>

<h2>Inline Documention in .js and .html Files</h2>
<p>The double slashes prefix ensures that the documentation is interpreted as 
comment in JavaScript and that it does not affect the functionality of the 
scripts. You might suspect that a lot of inline documentation may reduce 
performance due to bigger files and more work at run-time for the JS parser. 
Optionally all documentation tags will be stripped out by the obfuscator so that 
there is no negative side-effect on the performance.</p>
<p>If you have pure .js files the tags can simply are embedded into the code, as 
mentioned above they don't affect the functionality. If you have embedded 
JavaScript within HTML files the inline documentation either can be included in the according <tt>&lt;script&gt;...&lt;/script&gt;</tt> section or be put into additional HTML 
comments <tt>&lt;!-- inline documentation --&gt;</tt>.</p>
<h2>Examples</h2>
<h3>Module and File Header</h3>
<p class="listing">//:file:*:fffProto.js<br>
//:d:en:Implements the standard JavaScript Object prototype extensions for the _<br>
//:d:en:Window, String, Number, Array, Date, Boolean and Math classes.</p>
<h3>Package and Class Header</h3>
<p class="listing">//:package:*:Window<br>
//:class:*:Window.String<br>
<font color="#808080">//:d:de:Erweitert die JavaScript [tt]String[/tt] Klasse um einige 
Convenience-Methoden.<br>
</font>//:d:en:Extends the JavaScript [tt]String[/tt] class with some convenience 
methods.</p>
<h3>Method within a Class including Arguments and Result</h3>
<p class="listing">//:m:*:toNumberSystem<br>
<font color="#808080">//:d:de:Konvertiert eine Zahl in einen String unter 
Verwendung des angegebenen Zahlensystem.<br>
</font>//:d:en:Converts a number into a String by using the given radix.<br>
<font color="#808080">//:a:de::aRadix:Integer:Basis des Zahlensystems (z.B. 2 
f&amp;uuml;r bin&amp;auml;r, 8 f&amp;uuml;r oktal, 16 f&amp;uuml;r hexadezimal).<br>
//:a:de::aDigits:Integer:Anzahl Stellen, ggf. wird mit Nullen aufgef&amp;uuml;llt.
<br>
</font>//:a:en::aRadix:Integer:Radix of the number system (e.g. 2 for binary, 8 
for octal, 16 for hex).<br>
//:a:en::aDigits:Integer:Number of digits, if needed filled with zeros.<br>
<font color="#808080">//:r:de:::String:Zahl im angegebenen Zahlensystem als 
String.<br>
</font>//:r:en:::String:String with number in selected number system.</p>
<h3>Method with Optional Arguments and &quot;void&quot; Result</h3>
<p class="listing">//:m:*:startKeepAlive<br>
//:d:en:Starts the keep-alive timer in background. keep-alive sends _<br>
//:d:en:periodic pings to the server with an configurable interval.<br>
//:d:en:If the keep-alive timer has already has been started, the previous _<br>
//:d:en:one will be stopped automatically and a new one with new options _<br>
//:d:en:will be initiated.<br>
//:a:en::aOptions:Objects:Optional arguments as listed below...<br>
<font color="#008000">//:a:en:aOptions:interval:Number:Number of milliseconds 
for the interval.<br>
//:a:en:aOptions:echo:Boolean:Specifies wether the server is supposed to send an 
answer to the client.<br>
//:a:en:aOptions:immediate:Boolean:Specifies wether to send the first ping 
immediately or after the first interval.<br>
</font>//:r:*:::void:none</p>
<h3>Constant Declaration</h3>
<p class="listing">//:const:*:TIMEZONE_OFS_MILLIS<br>
<font color="#808080">//:d:de:Differenz zwischen lokaler Zeitzone und GMT in 
Millisekunden.<br>
</font>//:d:en:Delta between local timezone and GMT in milliseconds.</p>
<h3>Function Declaration</h3>
<p class="listing">//:f:*:$<br>
//:d:en:Replacement for document.getElementById.<br>
//:a:en::aId:String:Id of the element.<br>
//:r:en:::Element:Reference to the element oder null if the element could not be 
found.</p>
<p>&nbsp;</p>
<p>Ein Sourcecode/Inline Dokumentationssystem für JavaScript, geschrieben in 
Java mit Swing GUI. Conditional Defines und kundenspezifische Versionen.<br>
Folgende Arten von Tags sind definiert<br>
? Tags für Inline-Dokumentation inkl. Lokalisierung der Dokumentation<br>
? Tags für Conditional Defines<br>
? Tags für Browserspezifische Versionen<br>
<br>
21.6.1 Tags im Allgemeinen<br>
Jede Zeile wird eingeleitet mit zwei Schrägstrichen und einem Doppelpunkt. Jede 
Tag-Zeile enthält neben dem eigentlichen Tag und der Sprache zusätzliche 
Angaben. Die weiteren Angaben werden mit einem Doppelpunkt voneinander getrennt.<br>
//:tag:sprache:weitere:parameter<br>
<br>
21.6.2 Tags für Inline-Dokumentation<br>
<br>
Die zwei führenden Schrägstriche werden vom Browser als Kommentar gewertet und 
daher nicht als Funktionscode interpretiert.<br>
<br>
Vor der Veröffentlichung von dokumentierten Quelltext sind zwei wichtige Punkte 
zu beachten: Zum einen wird der JavaScript Code dem Browser im Klartext, das 
heißt inklusive der Inline-Dokumentation übermittelt. Dies mag aus Gründen des 
Knowhow-Schutzes nicht in Ihrem Interesse liegen. Zum anderen werden unnötig 
viele Daten an den Client übertragen, was zu Verzögerungen bei der 
Seitendarstellung führt. Letztlich ist JavaScript eine interpretierte Sprache, 
d.h. umfangreiche Kommentare führen in geringem Umfang auch zur Verlangsamung 
der Ausführung.<br>
Vor der Veröffentlichung sollte daher mit einem Obfuscator der Quellcode von der 
Dokumentation befreit werden.<br>
21.6.3 Die Sprachen<br>
<br>
JSDoc ist mehrsprachfähig ausgelegt, d.h. Sie können die Dokumentation zu den 
Sourcen direkt im Quelltext mehrsprachig eingeben, um sofort<br>
<br>
Zukünftig wird eine Schnittstelle zu IJX4ML zur Verfügung stehen, mit dessen 
Hilfe die Dokumentation auch in einer Stammsprache erstellt und dann bequem von 
mehreren Personen oder Übersetzungsbüros parallel übersetzt werden kann.<br>
<br>
Als Kürzel werden derzeit verwendet:<br>
<br>
&quot;de&quot; - deutsch<br>
&quot;en&quot; - englisch<br>
21.6.4 Allgemeine Tags<br>
<br>
Das d (description) Tag<br>
Das description Tag ermöglicht, einen beschreibenden Text für ein Objekt zu 
hinterlegen. Die Kurzform d statt description ist erlaubt. Das description tag 
ist immer nur in Verbindung mit einem vorangehenden Objekt sinnvoll. Die 
angebenene Beschreibung bezieht sich immer auf diese vorangehende Objekt. ist 
kein solches vorhanden, wird die Beschreinung ignoriert, weil sie nicht 
zugeordnet werden kann. Vorangehende Objekte können zum Beispiel Klassen sein.<br>
Allgemeine Syntax:<br>
//:d:language|*:&lt;text&gt;<br>
Beispiel:<br>
//:d:de:Dies ist die Beschreibung für die Funktion<br>
Packages<br>
<br>
//:package:language|*:name<br>
<br>
Klassen<br>
<br>
//:class:language|*:name<br>
Methoden<br>
<br>
//:method:language|*:name<br>
Statt method ist auch die Kurzform m erlaubt.<br>
//:method:language|*:name<br>
<br>
Argumente<br>
Für Funktionen und Methoden können Sie deren Argumente dokumentieren. Verwenden 
Sie hierzu die argument Tags:<br>
//:argument:language|*:Object:Field:Type:Text<br>
Statt argument ist auch die Kurzform a erlaubt.<br>
//:a:language|*:Object:Field:Type:Text<br>
Falls eine Funktion oder Methode keine Argumente benötigt, so können Sie dem 
Parser dies explizit mit einem Minus-Zeichen mitteilen oder einfach kein 
argument tag angeben.<br>
//:a:*::-<br>
Ergebnis<br>
Sowohl Methoden als auch Funktionen können ein Ergebnis liefern. Wenn nicht ist 
das Ergebnis undefined, in der Dokumentation auch als void bezeichnet. <br>
//:result:language|*: Object:Field:Type:Text<br>
Statt result ist auch die Kurzform r erlaubt.<br>
//:r:language|*:Object:Field:Type:Text<br>
Gibt eine Funktion kein Ergebnis zurück, so kann dies mit dem Typ void 
angegeben werden, was üblicherweise in allen Sprachen gleich behandelt wird.<br>
//:r:*:::void<br>
<br>
21.6.5 Funktionen<br>
Beachten Sie bitte, dass Methoden von Klassen mit dem method Tag und nicht mit 
function dokumentiert werden sollten.<br>
//:function:language|*:name<br>
Zur vollständigen Dokumentation einer Funktion sollten dem function Tag immer 
ein description Tag, ein oder mehrere argument Tags sowie ein result Tag folgen.<br>
21.6.6 Variablen<br>
<br>
//:variable:language:Name:Type<br>
Statt variable ist auch die Kurzform var erlaubt.<br>
//:variable:language:Name:Type<br>
Danach sollte ein description Feld folgen.<br>
21.6.7 Konstanten<br>
<br>
//:constant:language|*:Name:Type:Value<br>
Statt constant ist auch die Kurzform const erlaubt.<br>
//:c:language|*:Name:Type:Value<br>
Danach sollte ein description Feld folgen.<br>
21.6.8 Weitere Tags<br>
<br>
deprecated<br>
<br>
//:&lt;sprache&gt;:ancestor<br>
<br>
21.6.9 Dokumentation erstellen mit der JavaScript-Toolbox<br>
Mit der Java Anwendung JS-Toolbox, die Sie kostenlos unter 
http://five-feet-further.com/downloads herunter laden können, erstellen Sie aus 
der Inline-Dokumentation in Ihrem Quelltext schnell und einfach eine 
Entwickler-Dokumentation. Ziel dabei ist zunächst ein allgemein verwendbares 
Format zu erzeugen aus dem dann leicht weitere Formate erzeigt werden können.<br>
Starten Klicken Sie auf Start und der JstoDoc Parser durchsucht die gewählte 
Quelldatei nach allen Tags für die Inline Dokumentation und erzeugt hieraus eine 
XML-Datei.<br>
&lt;todo:Auszug aus .xml-Datei darstellen&gt;<br>
<br>
Sie können diese XML-Datei wahlweise in ein HTML-Web exportieren oder 
automatisch Seiten für das MediaWiki Sytem daraus erzeugen lassen. Wenn Sie 
weitere Exportformate unterstützen möchten, so können Sie einfach eine weitere 
Klasse zur Konvertierung der XML in Ihr Zielformat erstellen. Mit den beiden 
mitgelieferten Dateien finden Sie zwei praktikable Beispiele.<br>
<br>
Ebenso können Sie JSToDoc zur Erstellung kundenspezifischer Versionen verwenden. 
Kundenspezifische Versionen unterscheiden sich zum einen durch die Auswahl der 
Sprache für die Inline-Dokumentation. <br>
<br>
21.7 Conditional Defines<br>
JavaScript unterstützt von Natur aus keine Conditional Defines, die es 
ermöglichen, bestimmte Teile des Codes für kundenspezifische Anwendungen oder 
Entwicklungs- und Testzwecke zu beizubehalten oder wahlweise herauszufiltern.<br>
Wollen Sie zum Beispiel mehrere Versionen einer JavaScript Bibliothek mit 
unterschiedlichem Funktionsumfang distributieren, werden Sie nur eine Code-Datei 
pflegen wollen, bestimmte Klassen oder auch nur bestimmte Methoden von Klassen 
in einer der Version jedoch unterdrücken und in der anderen zulassen.<br>
<br>
Um die Ausführung des Code auch ohne ein vorheriges Parsing nach Conditional 
Defines zu erlauben, verwenden wir einfach festgelegte Tags in Kommentaren, 
ähnlich wie auch für die Single-Source-Inline-Dokumentation. Kommentare stören 
die normale Interpretation des Codes nicht, können jedoch von einem externen 
Zusatzprogramm als Conditionals verstanden werden.<br>
<br>
Folgende Tags werden von &lt;todo: Name&gt; unterstützt:<br>
<br>
//:ifdef:schalter<br>
//:ifndef:schalter<br>
//:else<br>
//:endif<br>
<br>
Beispiel:<br>
//:ifdef:VollVersion<br>
var VERSION = &quot;2.20.11.2876&quot;;<br>
//:else<br>
var VERSION = &quot;Demo-Version&quot;;<br>
//:endif<br>
Häufigen Einsatz finden Conditional Defines auch für Debug-Zwecke. 
Debug-Meldungen oder Log-Ausgaben in der Entwicklungs-Version können Sie mit 
Hilfe der vordefinierten Bedingung //:ifndef:dbg einfach für die 
Produktionsversion heraus filtern.<br>
<br>
Die &lt;todo: Namen einsetzenf3DevTools&gt; Anwendung erlaubt es, eine beliebige 
JavaScript Datei zu lesen, die Conditional Defines festzulegen und eine neue 
Datei zu erzeugen, die alle von Ihnen gesetzten Bedingungen berücksichgt. Dies 
ist die Basis um aus einem gemeinsamen Code leicht kundenspezifische Versionen 
zu erstellen. Details zu der Anwendung erfahren Sie in Kapitel ab Seite .<br>
21.7.1 Spezifische Konvertierungen<br>
Zusätzlich anderen kann für jede spezifische Version kann eine individuelle 
Konvertierungstabelle hinterlegt werden.<br>
<br>
21.7.2 Ausgabeformate<br>
Die Umwandlung der Inline-Dokumentation in das endgültige Ausgabeformat erfolgt 
in zwei Stufen. Die erste Stufe parst den Quelltext und generiert aus den 
gefundenen Tags ein XML Dokument. In der zweiten Stufe kann dann aus diesem XML 
Dokument wahlweise ein Web oder ein Media-Wiki-Dokument erzeugt werden.<br>
Wie Sie MediaWiki so konfigurieren, dass Sie XML-Dokumente importieren können, 
haben Sie ja schon in Kapitel 20.4.3 ab Seite 302 erfahren.<br>
21.7.3 Mehrsprachige Dokumentation<br>
Die Inline-Dokumentation kann direkt im Code in verschiedenen Sprachen erfasst 
und getrennt exportiert werden.<br>
mit Single Source<br>
&nbsp;</p>

</body>

</html>