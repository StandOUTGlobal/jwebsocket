<html>

<head>
<meta http-equiv="Content-Language" content="de">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>jWebSocket JavaScript Client</title>
<link rel="stylesheet" type="text/css" href="../res/css/jwebsocket.css">
</head>

<body>

<h2>jWebSocket Java Script Client for Web Browsers</h2>
<p>This section describes how to use the jWebSocket JavaScript Client in your 
web pages. The following diagram first shows the infrastructure of the 
jWebSocket Client in JavaScript.</p>
<img class="diagram" border="0" src="../images/infra_client.jpg">
<p class="imageFooter">jWebSocket client infrastructure</p>
<br/>
<p>Details pending...</p>

<!--

<h3>jWebSocketBaseClient</h3>
<p>Provides the fundamental connect, disconnect and send methods as well as the 
receive listener and event callbacks for the basic WebSocket communication.</p>
<p>In case of errors exceptions are fired which need to be handled properly by 
the application. There is no specific error handling implemented in this level.</p>
		<p>On disconnect the client immediately closes the socket connection, no 
		data or close request is send to the server. The JavaScript client will 
		not fire a close event because the disconnect was triggered 
		programmatically on the client and not by the server. The server does 
		not send any good bye message or similar.</p>
<h3>jWebSocketTokenClient</h3>
<p>Provides the timeout, session management and token communication on the 
client side.</p>
<p>You usually won&#39;t create instances of this class because it only provides empty 
methods for the token management which are overwritten by their descendant classes 
like jWebSocketJSONClient (see below). Low level exceptions are caught in this tier and errors are returned as 
objects with an error code, a locale key with optional arguments and a default 
message. This allows an application to easily localize the WebSocket error 
management.</p>
<h3>jWebSocketJSONClient</h3>
<p>Pending...</p>
		<h3>jWebSocketCSVClient</h3>
<p>Pending...</p>
		<h3>jWebSocketXMLClient</h3>
<p>Pending...</p>
-->		
</body>

</html>