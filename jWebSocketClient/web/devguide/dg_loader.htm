<html>

<head>
<meta http-equiv="Content-Language" content="de">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>jWebSocket JavaScript Client</title>
<link rel="stylesheet" type="text/css" href="../res/css/jwebsocket.css">
</head>

<body>

<h2>jWebSocket Class Loader</h2>
<p>This section describes how the engines, servers, plug-ins and filters are 
loaded at run-time, controlled by the <tt>jWebSocket.xml</tt> configuration file.</p>
<p>The Class Loader works in two modes:</p>
<p>a) Development Mode (dev)<br>
b) Production Mode (prod)</p>
<p>specified by the <tt>&lt;installation&gt;</tt> tag in the configuration file.</p>
<blockquote><pre class="listing"><span style="font-family:"Monospaced",monospace; color:#000000; white-space: pre;">
<span style="color:#0000e6;">&lt;installation</span><span style="color:#0000e6;">&gt;</span>dev|prod<font color="#FF0000"><sup>*</sup></font><span style="color:#0000e6;">&lt;/installation</span><span style="color:#0000e6;">&gt;</span>
</span></pre><p class="imageFooter">Specifying jWebSocket development or production mode</p></blockquote>
<p><span style="font-family:"Monospaced",monospace; color:#000000; white-space: pre;">
<font color="#FF0000" style="font-weight:bold"><sup>*</sup></font>
</span>only <tt>dev</tt> <b>or</b> <tt>prod</tt>, don't specifiy both here. Both modes are described below.</p>
<h3>Development Mode</h3>
<p>The development mode is useful when you compile jWebSocket from the source allowing 
you to 
instantiate engines, servers, plugins and filters programmatically at run-time. It relieves 
you from the pain of generating jars to the libs folder etc. It also makes things 
easier for debugging your new plugins and filters. By 
default it uses the <tt>JWebSocketInitializer</tt> class which instantiates the 
jWebSocket default set of engines (TCPEngine, NettyEngine), servers (CustomServer, TokenServer), plugins (SystemPlugIn, RPC, FlashBridge...) 
and filters (SystemFilter).</p>
<p>If you want to add your own plug-ins, filters or even your own custom-specific server 
you can simply extend the <tt>JWebSocketInitializer</tt> class by instantiating your
classes in this existing one and run, test and debug it. In development mode the 
<tt>&lt;initializerClass&gt;</tt> element in <tt>jWebSocket.xml</tt> file specifies which class is used 
to programmatically initialize the jWebSocket Server.</p>
<blockquote><pre class="listing"><span style="font-family:"Monospaced",monospace; color:#000000; white-space: pre;">
<span style="color:#0000e6;">&lt;initializerClass</span><span style="color:#0000e6;">&gt;</span>org.jwebsocket.server.loader.JWebSocketInitializer<span style="color:#0000e6;">&lt;/initializerClass</span><span style="color:#0000e6;">&gt;</span>
</span></pre><p class="imageFooter">Specifying the default jWebSocket initializer class</p></blockquote>
<p>Hence,&nbsp;if you want to create your initializer class based on <tt>JWebSocketInitializer</tt> 
as example you can specify it as follows.</p>
<blockquote><pre class="listing"><span style="font-family:"Monospaced",monospace; color:#000000; white-space: pre;">
<span style="color:#0000e6;">&lt;initializerClass</span><span style="color:#0000e6;">&gt;</span>com.yourcompany.jwebsocket.YourInitializer<span style="color:#0000e6;">&lt;/initializerClass</span><span style="color:#0000e6;">&gt;</span>
</span></pre><p class="imageFooter">Specifying your own jWebSocket initializer class</p></blockquote>
<p>All the custom initializer has to implement WebSocketInitializer interface and 
register via xml configuration &lt;initializerClass&gt; property.</p>
<h3>Production Mode</h3>
<p>If the installation value is <tt>prod</tt> then that means the jWebSocket 
Server will run on 
folder structure desribed <a href="../infrastructure/infrastructure.htm">here</a>. It will use the 
<tt>JWebSocketXmlConfigInitializer</tt> class which the client code cannot override so the 
engine, server, plug-in and filter jars are loaded based on the properties specified in the <tt>jWebSocket.xml</tt> configuration file.</p>
<p>All the jars are expected to be located in the <tt>%JWEBSOCKET_HOME%/libs</tt> folder.<h3>
<h3>Defaults</h3>
<p>If the <tt>&lt;installation&gt;</tt> tag is not defined, by default it is assumed to be <tt>dev</tt>. If the <tt>&lt;initializerClass&gt;</tt> is not defined, by default it is assumed to 
be <tt>org.jwebsocket.server.loader.JWebSocketInitializer</tt>.</p>


</body>

</html>