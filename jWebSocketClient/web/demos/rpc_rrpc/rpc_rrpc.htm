<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket RPC Demo (uses jWebSocket Client and Server)
		//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket RPC Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			// allow the rrpc access to the method jws.RRPCServer.demo

			var lWSC = null;

			function connect() {
				var lURL = jws.JWS_SERVER_URL; // + "/;prot=json";

				log( "Connecting to " + lURL + " ..." );
				var lRes = lWSC.open( lURL, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection established.</font>" );
						jws.$("simgStatus").src = "../../images/connected.png";
					},

					// OnMessage callback
					OnMessage: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket message received: '" + aEvent.data + "'</font>" );
						jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;" + lWSC.getId();
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
						jws.$("simgStatus").src = "../../images/disconnected.png";
						jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
					}

				});

				log( lWSC.resultToString( lRes ) );
			}

			function disconnect() {
				if( lWSC ) {
					log( "Disconnecting..." );
					var lRes = lWSC.close({timeout: 3000});
					log( lWSC.resultToString( lRes ) );
				}
			}


			function initPage() {
				eLog = jws.$( "sdivChat" );
				eArgs = jws.$( "stxfMsg" );
				eTarget = jws.$( "stxfTarget" );
				eSpawnThread = jws.$( "schkThreaded" );
				eRrpc = jws.$( "schkRrpc" );
				
				if( jws.browserSupportsWebSockets() ) {
					lWSC = new jws.jWebSocketJSONClient();
					lWSC.addGrantedProcedure("demo.rrpcTest1");
					lWSC.addGrantedProcedure("demo.rrpcTest2");
					lWSC.addGrantedProcedure("demo.rrpcTest3");
					lWSC.removeGrantedProcedure("demo.rrpcTest3");
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfMsg" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfTarget" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnGranted" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnProtected" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnRRPC" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				disconnect();
			}
			
			demo = {
				rrpcTest1: function (arg1, arg2, arg3){
					log("rrpcTest1 has been called by the server");
					if (arg1) {
						log("arg1: " + arg1);
					}
					if (arg2) {
						log("arg2: " + arg2);
					}
				},
				rrpcTest2: function (arg1, arg2){
					log("rrpcTest2("+arg1+", "+arg2+") has been called by the server");
				},
				rrpcTest3: function (){
					log("rrpcTest3 has been called by the server");
				}
			};
			var selectRrpcType = function () {
				var lClassName ;
				if (eRrpc.checked) {
					if (document.getElementById('rrpcTypeBrowser').checked) {
						lClassName = 'demo' ; //browser className
					} else {
						lClassName = 'org.jwebsocket.android.demo.RPCDemoActivity' ; //android classname
					}
				} else {
					lClassName = 'org.jwebsocket.rpc.sample.SampleRPCLibrary'; //server rpc classname
				}
				document.getElementById('className').value = lClassName;
			}
			var setValues = function (aMethodName, aArgs) {
				selectRrpcType();
				document.getElementById('methodName').value = aMethodName;
				eArgs.value = aArgs ;
			}
			
			var rpcTest1 = function (){
				setValues('rrpcTest1', "null");
			}
			var rpcTest11 = function (){
				setValues('rrpcTest1', "hello ' & é à");
			}
			var rpcTest12 = function (){
				setValues('rrpcTest1', 123);
			}
			var rpcTest2 = function (){
				setValues('rrpcTest2', "[[\"'aa\", \"b&\"], [[1,2],[3,4]]]");
			}
			var rpcTest21 = function (){
				setValues('rrpcTest2', "[[\"'aa\", \"b&\"], [[1,\"2\"],[3,4]]]");
			}
			var rpcTest3 = function (){
				setValues('rrpcTest3', "null");
			}
			

			var callMethod = function () {
				// send a reverse remote procedure call to another client
				//If targetID is not a number, try a simple RPC:
				var methodName = document.getElementById('methodName').value ;
				var className = document.getElementById('className').value ;
				try {
					var arguments = eval(document.getElementById('stxfMsg').value) ;
				} catch (e) {
					arguments = document.getElementById('stxfMsg').value ;
				}
			
				if (!eRrpc.checked) {
					// perform the Remote Procedure Call...
					var lRes = lWSC.rpc(
						// pass class, method and argument for server java method:
						className,
						methodName,
						arguments,
						// pass option to spawn thread and response call back
						{	spawnThread: eSpawnThread.checked,
							// new easy-to-use response callback
							OnResponse: function( aToken ) {
								if( aToken.code != 0 ) {
									log( "RPC Error: " + aToken.msg );
								} else {
									var lRes = aToken.result;
									// if an object is returned convert it into a human readable format
									if( typeof lRes == "object") {
										lRes = JSON.stringify( lRes );
									}
									log( "Received RPC result: " + lRes );
								}
							}
						}
					);					
				} else {
					log( "Reverse remote calling " + methodName + " with args '" + arguments + "'..." );
					aClassName = 'org.jwebsocket.android.demo.RPCDemoActivity';					
					var lRes = lWSC.rrpc(
							eTarget.value,			// target
							className,				// classname
							methodName,				// method
							arguments,				// arguments as an array
							{						// options
								spawnThread: eSpawnThread.checked,
								// new easy-to-use response callback
								OnResponse: function( aToken ) {
									if( aToken.error ) {
										log( "RRPC Error: " + aToken.error );
									} else {
										log( "Received RRPC result: " + aToken.result );
									}
								}
							}
					);
					log(lWSC.resultToString( lRes ));	
				}
			}
			var clickOnRrpc = function () {
				eTarget.disabled = !eRrpc.checked ;
				document.getElementById('rrpcTypeBrowser').disabled = !eRrpc.checked ;
				document.getElementById('rrpcTypeAndroid').disabled = !eRrpc.checked ;
			}
		</script>
	</head>
	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/rpc_rrpc/rpc_rrpc.htm" );
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket Remote Procedure Calls (RPC) Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>
		<!--
		<h1>jWebSocket Remote Procedure Calls (RPC) Demo
			<img id="simgStatus" src="../../images/disconnected.png" align="right"/>
			<span align="right">test</span>
		</h1>
		-->
		<p>This demo shows how to call a Java method on a jWebSocket server from
		a browser client and return the result. This example is based on
		the class <code>org.jwebsocket.plugins.RPCPlugIn</code>. The <code>getMD5</code> 
		method simply returns the 32 digit MD5 sum of the passed string 
		argument. If you are not sure whether your favorite browser supports 
		WebSockets please refer to our <a target="_top" href="http://jwebsocket.org/jws_for_all.htm">
		jWebSocket Cross-Browser Compatibility</a> page.</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"></td>
					<td class="stdDlg" width="5">Arguments</td>
					<td class="stdDlg" width="" colspan="2"><input class="stxfDlg" id="stxfMsg" type="text" value="My Remote Procedure Arguments" style="width:100%"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGranted" type="button" value="Call method" onclick="callMethod();"></td>
					<td class="stdDlg" width="5"><!-- <input class="sbtnDlg" id="sbtnProtected" type="button" value="Call protect." onclick="rpcProtectedDemo();"> --></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5">MethodName</td>
					<td class="stdDlg" width=""><input class="stxfDlg" id="methodName" type="text" style="width:100%" value="getMD5"></td>
					<td class="stdDlg" width=""><input class="stxfDlg" id="className" type="text" style="width:100%" value="org.jwebsocket.rpc.sample.SampleRPCLibrary"></td>
					<td class="stdDlg" colspan="2" width="5"><input class="schkThreaded" id="schkThreaded" type="checkbox" value="on" checked="checked" title="run remote procedure in separate thread on server"> spawn thread<!-- <input class="sbtnDlg" id="sbtnRRPC" type="button" value="Call reverse" onclick="(r)rpcDemo();"> --></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5">(R)Rpc</td>
					<td class="stdDlg" width=""><input class="schkRrpc" id="schkRrpc" type="checkbox" value="on" title="run rrpc" onchange="clickOnRrpc(); selectRrpcType();" >Rrpc</td>
					<td class="stdDlg" width=""><input class="stxfDlg" id="stxfTarget" type="text" value="" style="width: 70px" > ID  - Select rrpc target type : <input checked="true" type="radio" name="rrpcType" value="browser" id="rrpcTypeBrowser" onchange="selectRrpcType()" /> browser <input type="radio" name="rrpcType" value="android" id="rrpcTypeAndroid" onchange="selectRrpcType()" /> android</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5" id="rpcOrRrpc"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest1" onclick="rpcTest1();"></td>
					<td class="stdDlg" width="">invoke (r)rpcTest1(), the most basic (r)rpc test.</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest1.1" onclick="rpcTest11();"></td>
					<td class="stdDlg" width="">invoke (r)rpcTest1(\"hello ! ' & = é test\"), with a special string as parameter. Will only work with clients which suport method overload (not with js)</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest1.2" onclick="rpcTest12();"></td>
					<td class="stdDlg" width="">invoke (r)rpcTest1(123), with a int as parameter. Will only work with clients which suport method overload (not with js</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest2" onclick="rpcTest2();"></td>
					<td class="stdDlg" width="">(r)rpcTest2(["'aa", "b&"], [[1,2],[3,4]]), test imbricated list</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest2.1" onclick="rpcTest21();"></td>
					<td class="stdDlg" width="">(r)rpcTest2(["'aa", "b&"], [[1,"2"],[3,4]]), test imbricated list : should fail since array parameter are not only int. (try to invoke java method (r)rpcTest2(List &lsaquo;String&rsaquo; aList, List&lsaquo;List&lsaquo;Integer&rsaquo;&rsaquo; aList2))</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="(r)rpcTest3" onclick="rpcTest3();"></td>
					<td class="stdDlg" width="">try to invoke a non-granted method</td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
				</tr>
			</table>
		</div>

	</body>
</html>
