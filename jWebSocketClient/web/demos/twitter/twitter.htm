<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
<!--
//	****************************************************************************
//	jWebSocket Mail Demo (uses jWebSocket Client and Server)
//	(C) 2010 Alexander Schulze, jWebSocket.org, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	****************************************************************************
-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Twitter Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<!-- load the jWebSocket JavaScript client library -->
		<script type="text/javascript" src="../../res/js/jWebSocket.js"></script>
		<!-- this one imports the client side twitter plug-in -->
		<script type="text/javascript" src="../../res/js/jwsTwitterPlugIn.js"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;
			var lTwitterAuthenticationURL = null;
			var lTwitterAccessVerifier = null;
			var hTwAuth = null;


			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;
			var gUsername = null;

			function logon() {
				// URL is ws://[yourhostname|localhost]:8787
				var lURL = jws.JWS_SERVER_URL;
				gUsername = eUsername.value;
				var lPassword = ePassword.value;
				ePassword.value = "";

				log( "Connecting to " + lURL + " and logging in as '" + gUsername + "'..." );
				var lRes = lWSC.logon( lURL, gUsername, lPassword, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection established.</font>" );
						jws.$("simgStatus").src = "../../images/connected.png";

						// immediately request an Access Token for Twitter Login
						lWSC.twitterRequestAccessToken();
					},
					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						log( "<font style='color:#888'>jWebSocket '" + aToken.type + "' token received, full message: '" + aEvent.data + "</font>" );
						if( lWSC.isLoggedIn() ) {
							jws.$("simgStatus").src = "../../images/authenticated.png";
						} else {
							jws.$("simgStatus").src = "../../images/connected.png";
						}
						jws.$("slblClientId").innerHTML =
							"&nbsp;Client&#x2011;Id:&nbsp;"
							+ lWSC.getId() + "&nbsp;"
							+ ( jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)" );
					},
					// OnClose callback
					OnClose: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
						jws.$("simgStatus").src = "../../images/disconnected.png";
						jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
					}
				});

				log( lWSC.resultToString( lRes ) );
			}

			function logoff() {
				if( lWSC ) {
					log( "Logging off " + ( gUsername != null ? "'" + gUsername + "'" : "" ) + " and disconnecting..." );
					// the timeout below  is optional, if you use it you'll get a good-bye message.
					var lRes = lWSC.close({ timeout: 3000 });
					log( lWSC.resultToString( lRes ) );
				}
			}

			function getTimeline() {
				var lRes = lWSC.twitterTimeline(
					eTwitterUsername.value
				);
				log( lWSC.resultToString( lRes ) );
			}

			function twitterLogout() {
				log( "Logging out from Twitter..." );
				hTwLogout = window.open(
					"http://twitter.com/logout",
					'twauth',
					'status=1,resizable=1,dependent=1,scrollbars=0,width=820,height=480,left=100,top=200'
				);
				/*
				var lRes = lWSC.twitterLogout();

				var lLink = jws.$("twLink");
				lLink.href = null;
				// lLink.target="twAuthTab";
				lLink.onclick = twitterLogin;

				log( lWSC.resultToString( lRes ) );
				*/
			}

			function tweet() {
				log( "Sending tweet '" + eTwitterMessage.value + "'..." );
				var lRes = lWSC.tweet(
					eTwitterMessage.value
				);
				log( lWSC.resultToString( lRes ) );
			}

			function getUserData() {
				log( "Retreiving data for user '" + eTwitterUsername.value + "'..." );
				var lRes = lWSC.twitterUserData(
					eTwitterUsername.value
				);
				log( lWSC.resultToString( lRes ) );
			}

			function onGotTwitterTimeline( aToken ) {
				log( "Timeline: " + aToken.msg );
			}

			// this method is called as call back from the Twitter API
			// once the Access token has been retreived
			// set the link to correctly open Twitter authentication
			// in a separate browser window.
			function onTwitterAccessToken( aToken ) {
				lTwitterAuthenticationURL = "twauth.htm?" + encodeURI(aToken.authenticationURL);
				// a new AccessToken has been received,
				// hence we should reset the verifier!
				lTwitterAccessVerifier = null;
			}

			function twitterSetVerifier( aVerifier ) {
				// OAuth Window detected a verifier from the Twitter API
				// so save it here for future use.
				lTwitterAccessVerifier = aVerifier;
				lWSC.twitterSetVerifier( aVerifier );
			}

			// this method is called when the user clicks the login button.
			// actually it's not a button but a link to prevent pop  up issues.
			function twitterLogin() {
				// do we already have an Access Token ?
				if( lTwitterAuthenticationURL != null ) {
					// open the twitter login window
					hTwAuth = window.open(
						lTwitterAuthenticationURL,
						'twitterAuth',
						'status=1,resizable=1,dependent=1,scrollbars=0,width=820,height=420,left=100,top=200'
					);
					// to be used only once
					lTwitterAuthenticationURL = null;
					// for sure we cannot be verified here yet
					lTwitterAccessVerifier = null;
					return false;
				} else {
					// request a new access token
					alert( "Apparently a revious Twitter login was not completed.")
					lWSC.twitterRequestAccessToken();
				}
			}

			function initPage() {
				eLog = jws.$( "sdivLog" );

				eTwitterUsername = jws.$( "stxfTwitterUsername" );
				eTwitterMessage = jws.$( "stxfTwitterMessage" );

				eUsername = jws.$( "stxfUsername" );
				ePassword = jws.$( "spwfPassword" );

				var lLink = jws.$("twLink");
				lLink.href = lTwitterAuthenticationURL;
				lLink.onclick = twitterLogin;

				// jws.browserSupportsWebSockets checks web if sockets are available
				// either natively, by the Flash Bridge or by the Chrome Frame.
				if( jws.browserSupportsWebSockets() ) {
					lWSC = new jws.jWebSocketJSONClient();
					lWSC.setTwitterCallbacks({
						OnGotTwitterTimeline: onGotTwitterTimeline,
						OnTwitterAccessToken: onTwitterAccessToken
					});
					eUsername.focus();
				} else {
					jws.$( "sbtnLogon" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogoff" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );

					jws.$( "stxfTwitterMessage" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfTwitterUsername" ).setAttribute( "disabled", "disabled" );

					jws.$( "stxfUsername" ).setAttribute( "disabled", "disabled" );
					jws.$( "spwfPassword" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}

			}

			function exitPage() {
				logoff();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/hello_world/hello_world.htm" );
				// location.href = "../../index.htm?page=demos/hello_world/hello_world.htm" ;
			}
		</script>
Testing our new #jWebSocket Twitter-Plugin, tweet via #WebSockets! http://jwebsocket.org
-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket Twitter Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>
		<p>This demo shows how to easily use Twitter via the jWebSocket Twitter service.</p>
		<!-- <iframe id="sifrtwitterLogin" style="width:100%; height:200px"></iframe> -->

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">jWebSocket&nbsp;Username</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfUsername" type="text" value="Guest" style="width:150px" title="jWebSocket username or 'Guest' for demo."></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogon" type="button" value="Login" onclick="logon();" title="Authenticates you against the jWebSocket Server."></td>
					<!-- use link instead of button here to prevent blocked pop-ups -->
					<!-- <td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLoginTwitter" type="button" value="Twitter Login" onclick="twitterLogin();"></td> -->
					<td class="stdDlg" width="5"><a class="sancDlg" disabled="disabled" id="twLink" onclick="twitterLogin();" title="Authenticates you against Twitter using OAuth.">Twitter&nbsp;Login&nbsp;</a></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnGetUser" type="button" value="Get User" onclick="getUserData();" title="Retreives the user data for the given Twitter user."></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">jWebSocket&nbsp;Password</td>
					<td class="stdDlg" width="5"><input class="spwfDlg" id="spwfPassword" type="password" value="guest" style="width:150px" title="jWebSocket password or 'guest' for demo."></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogoff" type="button" value="Logout" onclick="logoff();" title="Logs you out and disconnects from the jWebSocket server."></td>
					<td class="stdDlg" width="5"><a class="sancDlg" id="twLink" onclick="twitterLogout();">Twitter&nbsp;Logout</a></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGetTimeline" type="button" value="getTimeline" onclick="getTimeline();" title="Retreives the timeline (message) for the given Twitter user."></td>
					<td class="stdDlg" width=""><input class="sbtnDlg" id="sbtnTweet" type="button" value="tweet" onclick="tweet();"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Twitter&nbsp;Username</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfTwitterUsername" type="text" value="jwebsocket" style="width:150px"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();" title="Clears the result and event log below."></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Twitter&nbsp;Message</td>
					<td class="stdDlg" width="" colspan="5"><input class="stxfDlg" id="stxfTwitterMessage" type="text" value="Message-Body..." style="width:99%"></td>
				</tr>
			</table>
		</div>
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>

	</body>
</html>
