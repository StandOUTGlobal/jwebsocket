<!--
//	****************************************************************************
//	jWebSocket Simple Chat (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
//	more details.
//	You should have received a copy of the GNU General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/>.
//	****************************************************************************
-->

<html>
	<head>
		<meta http-equiv="Content-Language" content="de">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Test Suite</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jwebsocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var lJWSID = "jWebSocket Test Suite",
			lWSC = null,
			eLog = null,
			eUsername = null,
			ePool = null,
			eMessage = null,
			eDebug = null,
			eKeepAlive = null;

			var IN = 0;
			var OUT = 1;
			var EVT = 2;
			var SYS = "SYS";
			var USR = null;

			// append a line to the log text area
			function log( aUsername, aEvent, aString ) {
				var lFlag;
				switch( aEvent ) {
					case IN: lFlag = "<"; break;
					case OUT: lFlag = ">"; break;
					case EVT: lFlag = "*"; break;
					default: lFlag = "?";
				}
				// set a default user name if not yet logged in
				if( !aUsername ) {
					aUsername = lWSC.getUsername();
				}
				if( !aUsername ) {
					aUsername = "USR";
				}
				eLog.innerHTML +=
					aUsername + " " +
					lFlag + " " +
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function connect() {

				function login() {
					// auto login after connection is established
					var lUsername = eUsername.value;
					// log( SYS, OUT, "logging in user '" + lUsername + "'..." );
					var lRes = lWSC.login( lUsername, "", "" );
					// log( SYS, IN, "login: " + lWSC.resultToString( lRes ) );
				}

				// if already connected use existing connection to re-login...
				if( lWSC.isConnected() ) {
					login();
					return;
				}

				// adjust this URL to your jWebSocket server
				var lURL = jws.JWS_SERVER_URL + "/;prot=json,timeout=120000";
				log( SYS, OUT, "Connecting to " + lJWSID + " at " + lURL + "..." );

				// try to establish connection to jWebSocket server
				lWSC.open( lURL, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( SYS, IN, "Connection to " + lJWSID + " established." );
						login();
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						// for debug purposes
						if( eDebug.checked ) {
							log( SYS, EVT, "<font style='color:#888'>" +
								( aToken ? aToken.type : "-" ) + ": " +
								aEvent.data + "</font>");
						}
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
						log( SYS, IN, "Disconnected from " + lJWSID + "." );
					}
					
				});
			}

			function disconnect() {
				// disconnect automatically logs out!
				lWSC.stopKeepAlive();
				var lRes = lWSC.close({
					// wait a maximum of 3 seconds for server good bye message
					timeout: 3000
				});
				log( SYS, OUT, "logout: " + lRes.msg );
			}

			function broadcast() {
				var lMsg = eMessage.value;
				if( lMsg.length > 0 ) {
					log( USR, OUT, lMsg );
					var lRes = lWSC.broadcastText(
					"",		// broadcast to all clients (not limited to a certain pool)
					lMsg	// broadcast this message
				);
					// log error only, on success don't confuse the user
					if( lRes.code != 0 ) {
						log( SYS, OUT, "broadcast: " + lRes.msg );
					}
					eMessage.value = "";
				}
				doFocus( eMessage );
			}


			function testCSPerf() {
				var lLoop = 0;
				var lMax = parseInt( eLoopCount.value );
				if( isNaN( lMax ) ) {
					lMax = 250;
				}
				var lStarted;

				function doPing() {
					lWSC.ping({
						echo: true,
						OnResponse: function( aToken ) {
							if( aToken.error ) {
								log( SYS, OUT, "Ping returned error, aborting loop." );
							} else if( lLoop < lMax ) {
								lLoop++;
								doPing();
							} else {
								var lDuration = (new Date().getTime() - lStarted);
								var lAverage = lDuration/lMax;
								lAverage = lAverage.toFixed( 3 );
								log( SYS, OUT, "'ping' test finished, loops: " + lMax + ", total: " + lDuration + "ms, avg: " + lAverage + "ms" );
							}
						}
					});
				}

				if( lWSC.isConnected() ) {
					log( SYS, OUT, "Starting 'ping' test..." );
					lStarted = new Date().getTime();
					doPing();
				} else {
					log( SYS, OUT, "Not connected." );
				}
			}

			function testRPCPerf() {
				var lLoop = 0;
				var lMax = parseInt( eLoopCount.value );
				if( isNaN( lMax ) ) {
					lMax = 250;
				}
				var lStarted;

				function doRPC() {
					var lRes = lWSC.rpc(
						"org.jWebSocket.demo.DemoRPCServer", "getMD5", "This is a test!", {
						OnResponse: function( aToken ) {
							if( aToken.error ) {
								log( SYS, OUT, "RPC returned error, aborting loop." );
							} else if( lLoop < lMax ) {
								lLoop++;
								doRPC();
							} else {
								var lDuration = (new Date().getTime() - lStarted);
								var lAverage = lDuration/lMax;
								lAverage = lAverage.toFixed( 3 );
								log( SYS, OUT, "'RPC' test finished, loops: " + lMax + ", total: " + lDuration + "ms, avg: " + lAverage + "ms" );
							}
						}
					});
				}

				if( lWSC.isConnected() ) {
					log( SYS, OUT, "Starting 'RPC' test..." );
					lStarted = new Date().getTime();
					doRPC();
				} else {
					log( SYS, OUT, "Not connected." );
				}
			}


			function initPage() {
				// get some required HTML elements
				eLog = jws.$( "sdivChat" );
				eUsername = jws.$( "stxfUsername" );
				ePool = jws.$( "stxfPool" );
				eReceiver = jws.$( "stxfReceiver" );
				eMessage = jws.$( "stxfMsg" );
				eLoopCount = jws.$( "stxfLoopCount" );
				eDebug = jws.$( "schkDebug" );
				eKeepAlive = jws.$( "schkKeepAlive" );
					
				// check if WebSockets are supported by the browser
				if( jws.browserSupportsWebSockets() ) {
					// instaniate new TokenClient, either JSON, CSV or XML
					lWSC = new jws.jWebSocketJSONClient();
					// lWSC = new jws.jWebSocketCSVClient();

					//eUsername.addEventListener( "keydown", usrKeyDnLsnr, false );
					// eMessage.addEventListener( "keydown", msgKeyDnLsnr, false );
					// eUsername.addEventListener( "focus", elemFocusLsnr, false );
					// eMessage.addEventListener( "focus", elemFocusLsnr, false );
					
					eUsername.focus();
					eUsername.select();
				} else {
					jws.$( "sbtnSend" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogin" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogout" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClearLog" ).setAttribute( "disabled", "disabled" );
					
					eDebug.setAttribute( "disabled", "disabled" );
					eKeepAlive.setAttribute( "disabled", "disabled" );
					eUsername.setAttribute( "disabled", "disabled" );
					eMessage.setAttribute( "disabled", "disabled" );
					
					var lMsg = "Unfortunately your browser does not (yet) support WebSockets!\nPlease use a HTML 5 compliant browser!";
					alert( lMsg );
					log( SYS, IN, lMsg );
				}
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				if( lWSC ) {
					lWSC.disconnect({
						// force immediate client side disconnect
						timeout: 0
					});
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "index.htm?page=chat.htm" );
			}
		</script>
		<h1>jWebSocket Test Suite</h1>
		<p>This page is intended to be run for local test purposes only. Please avoid to stress our online-server.</p>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Username</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfUsername" type="text" value="anonymous" size="20"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="connect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="disconnect();"></td>
					<td class="stdDlg" width="" align="right">
						<input id="schkDebug" type="checkbox" value="off">&nbsp;Debug&nbsp;
						<input class="sbtnDlg" id="sbtnClearLog" type="button" value="Clear Log" onclick="clearLog();">
					</td>
				</tr>
			</table>
		</div>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Loops</td>
					<td class="stdDlg" width="40"><input class="stxfDlg" id="stxfLoopCount" type="text" value="250" style="width:100%"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtn" type="button" value="Ping" onclick="testCSPerf();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtn" type="button" value="RPC" onclick="testRPCPerf();"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Message</td>
					<td class="stdDlg" colspan="2" width=""><input class="stxfDlg" id="stxfMsg" type="text" value="Please type your message here!" style="width:100%"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnSend" type="button" value="Send" onclick="broadcast();"></td>
				</tr>
			</table>
		</div>
	</body>
</html>
