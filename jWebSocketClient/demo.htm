<!--
//	****************************************************************************
//	jWebSocket Demo (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
//	more details.
//	You should have received a copy of the GNU General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/>.
//	****************************************************************************
-->

<html>
	<head>
		<meta http-equiv="Content-Language" content="de">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Demo</title>
		<link rel="stylesheet" type="text/css" href="res/css/jwebsocket.css">
		<script src="res/js/jwebsocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var lWSC = null;
			var eLog = null;
			var eUsername = null;
			var ePassword = null;
			var ePool = null;
			var eMessage = null;

			// append a line to the log text area
			function log( aString ) {
				eLog.value += aString + "\n";
			}

			function connect() {
				// adjust this URL to your jWebSocket server (host and port)
				var lURL = "ws://" + location.host + ":8787/test";
				log( "> connecting to " + lURL + "..." );
				var lRes = lWSC.connect( lURL,
				function( aEvent ) {
					log( "* onopen: connection to jWebSocketServer established." );
				},
				function( aEvent ) {
					log( "* onmessage: " + aEvent.data );
				},
				function( aEvent ) {
					log( "* onclose: disconnected from jWebSocket Server." );
				}
			);
				// show result in log
				log( "< connect: " + lWSC.resultToString( lRes ) );
			}

			function showState() {
				log( "? isConnected and isLoggedIn..." );
				log(
				"! " +
					(	lWSC.isConnected() ?
					"connection to jWebSocket server established" :
					"no connection to jWebSocket server"
			) + ", " +
					(	lWSC.isLoggedIn() ?
					"logged in as '" + lWSC.getUsername() + "'" :
					"not logged in"
			)
			);
			}

			function login() {
				var lUsername = eUsername.value;
				log( "> logging in user '" + lUsername + "'" );
				var lRes = lWSC.login( lUsername, ePassword.value, ePool.value );
				log( "< login: " + lWSC.resultToString( lRes ) );
			}

			function logout() {
				log( "> logging out..." );
				var lRes = lWSC.logout();
				log( "< logout: " + lWSC.resultToString( lRes ) );
			}

			function getClients() {
				log( "> retreiving clients..." );
				var lRes = lWSC.getClients();
				log( "< clients: " + lWSC.resultToString( lRes ) );
			}

			function selPool() {
				log( "> selecting pool..." );
				var lRes = lWSC.selectPool( ePool.value );
				log( "< selectPool: " + lWSC.resultToString( lRes ) );
			}

			function echo() {
				var lString = "the current time is: " + new Date();
				log( "> echoing '" + lString + "'..." );
				var lRes = lWSC.echo( lString );
				log( "< echo: " + lWSC.resultToString( lRes ) );
			}

			function send() {
				var lMessage = eMessage.value;
				var lReceiver = eReceiver.value;
				log( "> sending '" + lMessage + "' to '" + lReceiver + "'..." );
				var lRes = lWSC.send( lReceiver, lMessage );
				log( "< send: " + lWSC.resultToString( lRes ) );
			}

			function broadcast() {
				var lMsg = eMessage.value;
				var lPool = ePool.value;
				log( "> broadcasting... " + lMsg + " to pool " + lPool );
				var lRes = lWSC.broadcast( lPool, lMsg );
				log( "< broadcast: " + lWSC.resultToString( lRes ) );
			}

			function disconnect() {
				log( "> disconnecting..." );
				var lRes = lWSC.disconnect();
				log( "< disconnect: " + lWSC.resultToString( lRes ) );
			}

			function clearLog() {
				eLog.value = "";
			}

			function initPage() {
				lWSC = new jws.jWebSocketClient();
				eLog = document.getElementById( "stxaLog" );
				eUsername = document.getElementById( "stxfUsername" );
				ePassword = document.getElementById( "spwfPassword" );
				ePool = document.getElementById ("stxfPool" );
				eReceiver = document.getElementById ("stxfReceiver" );
				eMessage = document.getElementById ("stxfMsg" );
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				lWSC.disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<h1>jWebSocket Simple Demo</h1>
		<p>&nbsp;</p>
		<p>This demo shows how to easily connect the browser client to the jWebSocket server.</p>
		<br/>
		<p><textarea id="stxaLog" style="width:100%" cols="80" rows="20"></textarea></p>
		<br/>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Message</td>
					<td class="stdDlg" width=""><input title="Type your message here!" class="stxfDlg" id="stxfMsg" type="text" value="Please type your message here!" style="width:100%"></td>
					<td class="stdDlg" width="5">Receiver</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfReceiver" type="text" value="Receiver" size="20"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnSend" type="button" value="Send" onclick="broadcast();"></td>
				</tr>
			</table>
		</div>

		<input id="sbtnConnect" type="button" value="Connect" onclick="connect();">
		<input id="sbtnShowState" type="button" value="Show State" onclick="showState();">
		<input id="sbtnEchoed" type="button" value="Echo" onclick="echo();">
		<input id="sbtnBroadcast" type="button" value="Broadcast" onclick="broadcast();">
		<input id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();">
		<input id="sbtnGetClients" type="button" value="Get Clients" onclick="getClients();">
		<input id="sbtnClearLog" type="button" value="Clear Log" onclick="clearLog();">
		<p>
			<input id="stxfUsername" type="text" value="anonymous" size="15">
			<input id="spwfPassword" type="password" value="12345" size="15">
			<input id="sbtnLogin" type="button" value="Login" onclick="login();">
			<input id="sbtnLogout" type="button" value="Logout" onclick="logout();">
		</p>
		<p>
			<input id="stxfPool" type="text" value="Pool" size="15">
			<input id="sbtnSelPool" type="button" value="Select Pool" onclick="selPool();">
		</p>

	</body>

</html>
